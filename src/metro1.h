// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef metro1_h
#define metro1_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "beat.h"
#include <FL/fl_ask.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Box.H>


class MainUI {
public:
  MainUI();
  Fl_Double_Window *mainWindow;
private:
  inline void cb_mainWindow_i(Fl_Double_Window*, void*);
  static void cb_mainWindow(Fl_Double_Window*, void*);
public:
  Fl_Return_Button *StartStopButton;
private:
  inline void cb_StartStopButton_i(Fl_Return_Button*, void*);
  static void cb_StartStopButton(Fl_Return_Button*, void*);
public:
  Fl_Output *BIG_TEMPO;
  Fl_Browser *m_PresetList;
private:
  inline void cb_m_PresetList_i(Fl_Browser*, void*);
  static void cb_m_PresetList(Fl_Browser*, void*);
public:
  Fl_Dial *m_Volume;
private:
  inline void cb_m_Volume_i(Fl_Dial*, void*);
  static void cb_m_Volume(Fl_Dial*, void*);
public:
  Fl_Group *TimerGroup;
  Fl_Button *ResetButton;
private:
  inline void cb_ResetButton_i(Fl_Button*, void*);
  static void cb_ResetButton(Fl_Button*, void*);
public:
  Fl_Output *BIG_TIMER;
  Fl_Input *m_EditStop;
  Fl_Input *m_EditTime;
  Fl_Input *m_EditNote;
private:
  inline void cb_Apply_i(Fl_Button*, void*);
  static void cb_Apply(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
public:
  Fl_Input *m_EditStart;
private:
  inline void cb_Delete_i(Fl_Button*, void*);
  static void cb_Delete(Fl_Button*, void*);
public:
  Fl_Group *Gr_Instruments;
  Fl_Round_Button *Beep;
private:
  inline void cb_Beep_i(Fl_Round_Button*, void*);
  static void cb_Beep(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *WoodBlock;
private:
  inline void cb_WoodBlock_i(Fl_Round_Button*, void*);
  static void cb_WoodBlock(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *SideStick;
private:
  inline void cb_SideStick_i(Fl_Round_Button*, void*);
  static void cb_SideStick(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *HighHat;
private:
  inline void cb_HighHat_i(Fl_Round_Button*, void*);
  static void cb_HighHat(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Tambourine;
private:
  inline void cb_Tambourine_i(Fl_Round_Button*, void*);
  static void cb_Tambourine(Fl_Round_Button*, void*);
  inline void cb_Set_i(Fl_Button*, void*);
  static void cb_Set(Fl_Button*, void*);
public:
  long m_RunState; 
  __time_t m_TimerStart;
  int double_clicked; 
  char *datfile; 
public:
  void init();
  void show();
  void OnClose();
  void OnStartStopButton();
  void OnDelete();
  void OnTimer();
  void OnReset();
  void OnVolChange();
  void OnApply();
  void InstCallback(int i);
  void SetWave(int res);
  int ReadDat();
  int WriteDat();
  int Validate(long *i_start, long *i_stop, long *i_time);
  void OnSave();
  void OnBrowserClick();
  void OnSet();
  void SetInstrumentButtons(int i);
};
#endif
